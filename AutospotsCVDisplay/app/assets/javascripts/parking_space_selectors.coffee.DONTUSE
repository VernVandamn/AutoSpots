# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

# the DOM request won't work because of when the javascript here is run
# canvas = new (fabric.Canvas)('c', selection: false)
#var percentage = 1;

'''

makeCircle = (left, top, line1, first) ->
  c = new (fabric.Circle)(
    left: left - 5
    top: top - 5
    strokeWidth: 1
    radius: 5
    fill: '#fff'
    stroke: '#666'
    first: first)
  c.hasControls = c.hasBorders = false
  c.line1 = line1
  c

restrictToEdges = (obj) ->
  obj.setCoords()
  # top-left  corner
  if obj.getBoundingRect().top < 0 or obj.getBoundingRect().left < 0
    obj.top = Math.max(obj.top, obj.top - (obj.getBoundingRect().top))
    obj.left = Math.max(obj.left, obj.left - (obj.getBoundingRect().left))
  # bot-right corner
  if obj.getBoundingRect().top + obj.getBoundingRect().height > obj.canvas.height or obj.getBoundingRect().left + obj.getBoundingRect().width > obj.canvas.width
    obj.top = Math.min(obj.top, obj.canvas.height - (obj.getBoundingRect().height) + obj.top - (obj.getBoundingRect().top))
    obj.left = Math.min(obj.left, obj.canvas.width - (obj.getBoundingRect().width) + obj.left - (obj.getBoundingRect().left))
  return

fabric.Image.fromURL 'http://s17.postimg.org/4740ku7z3/i_Stock_000000284123_XSmall.jpg', (oImg) ->
  #oImg.scaleToWidth(canvas.width*percentage);
  oImg.selectable = false
  canvas.setWidth oImg.width
  canvas.setHeight oImg.height
  canvas.calcOffset()
  canvas.add oImg
  return
line = undefined
isDown = undefined
creating = undefined
canvas.on 'mouse:down', (o) ->
  object = o.target
  if object.type == 'image'
    isDown = true
    creating = true
    pointer = canvas.getPointer(o.e)
    points = [
      pointer.x
      pointer.y
      pointer.x
      pointer.y
    ]
    line = new (fabric.Line)(points,
      strokeWidth: 2
      stroke: 'red'
      originX: 'left'
      originY: 'bottom')
    canvas.add line, makeCircle(line.get('x1'), line.get('y1'), line, true)
  #else if(object.type = 'circle') {
  #   object.line1.stroke = 'green';
  #    console.log("does this work? ", object.line1.stroke);
  #    canvas.renderAll();
  #  }
  return
canvas.on 'mouse:move', (o) ->
  if !isDown
    return
  pointer = canvas.getPointer(o.e)
  obj = o.target
  restrictToEdges obj
  line.set
    x2: pointer.x
    y2: pointer.y
  canvas.renderAll()
  return
canvas.on 'mouse:up', (o) ->
  isDown = false
  obj = o.target
  if creating
    canvas.add makeCircle(line.get('x2'), line.get('y2'), line, false)
    creating = false
  #  if(obj.type == 'circle') {
  #   obj.line1.stroke = 'red';
  #    console.log(obj.type);
  #    canvas.renderAll();
  #  }
  #document.getElementById("json").innerHTML = JSON.stringify(canvas.toDatalessJSON());
  output = ''
  count = 0
  canvas.toDatalessJSON().objects.forEach (element) ->
    console.log element.x1
    if element.type == 'circle'
      output += 'left: ' + element.left
      output += '; top: ' + element.top
      console.log count
      if count % 2 == 0
        output += ';  '
      else
        output += ';----'
      count += 1
    return
  if output != null
    document.getElementById('json').innerHTML = output
  return
canvas.on 'object:moving', (e) ->
  obj = e.target
  restrictToEdges obj
  if obj.first
    obj.line1 and obj.line1.set(
      'x1': obj.left + 5
      'y1': obj.top + 5)
  else
    obj.line1 and obj.line1.set(
      'x2': obj.left + 5
      'y2': obj.top + 5)
  canvas.renderAll()
  return
'''

# ---
# generated by js2coffee 2.2.0