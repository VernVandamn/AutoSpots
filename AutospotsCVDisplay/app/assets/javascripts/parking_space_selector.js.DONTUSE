var canvas = new fabric.Canvas('c', { selection: false });

//var percentage = 1;

fabric.Image.fromURL('http://s17.postimg.org/4740ku7z3/i_Stock_000000284123_XSmall.jpg', function (oImg) {
    oImg.set({ 'left': oImg.left + (oImg.width / 2), 'top': oImg.top + (oImg.height / 2)});
    oImg.selectable = false;
    canvas.setWidth( oImg.width );
		canvas.setHeight( oImg.height );
		canvas.calcOffset();
    canvas.add(oImg);
});

var line, isDown, creating;

canvas.on('mouse:down', function(o){
	var object = o.target;
  if(object.type == 'image') {
  isDown = true;
creating = true;
  var pointer = canvas.getPointer(o.e);
  var points = [ pointer.x, pointer.y, pointer.x, pointer.y ];
  line = new fabric.Line(points, {
    strokeWidth: 2,
    stroke: 'red',
    originX: 'left',
    originY: 'bottom'
  });
  canvas.add(line, makeCircle(line.get('x1'), line.get('y1'), line, true) );
  } //else if(object.type = 'circle') {
//  	object.line1.stroke = 'green';
//    console.log("does this work? ", object.line1.stroke);
//    canvas.renderAll();
//  }
});

canvas.on('mouse:move', function(o){
  if (!isDown) return;
  var pointer = canvas.getPointer(o.e);
  var obj = o.target;
  restrictToEdges(obj);
  line.set({ x2: pointer.x, y2: pointer.y });
  canvas.renderAll();
});

canvas.on('mouse:up', function(o){
  isDown = false;
  var obj = o.target;
  if(creating) {
  	  canvas.add(makeCircle(line.get('x2'), line.get('y2'), line, false));
      creating = false;
  }
//  if(obj.type == 'circle') {
//  	obj.line1.stroke = 'red';
//    console.log(obj.type);
//    canvas.renderAll();
//  }
  //document.getElementById("json").innerHTML = JSON.stringify(canvas.toDatalessJSON());
  var output = '';
  var count = 0;
  canvas.toDatalessJSON().objects.forEach(function(element){
  console.log(element.x1);
  if(element.type == "circle") {
    
  	output += "left: " + element.left; 
    output += "; top: " + element.top;
    console.log(count);
    if((count % 2) == 0) {
    	output += ";  ";
    } else {
    	output += ";----"
    }

    count += 1;
  }
  });
  if(output != null){
  	document.getElementById("json").innerHTML = output;
  }    
});
  
canvas.on('object:moving', function(e) {
  var obj = e.target;
  restrictToEdges(obj);
  if(obj.first) {
   	obj.line1 && obj.line1.set({ 'x1': obj.left+5, 'y1': obj.top+5 });
  } else {
  	obj.line1 && obj.line1.set({ 'x2': obj.left+5, 'y2': obj.top+5 });
  }
  canvas.renderAll();
});

function makeCircle(left, top, line1, first) {
    var c = new fabric.Circle({
    left: left - 5,
    top: top - 5,
    strokeWidth: 1,
    radius: 5,
    fill: '#fff',
    stroke: '#666',
    first: first
  });
  c.hasControls = c.hasBorders = false;
  c.line1 = line1;
  return c;
}

function restrictToEdges(obj) {
	obj.setCoords();        
        // top-left  corner
        if(obj.getBoundingRect().top < 0 || obj.getBoundingRect().left < 0){
            obj.top = Math.max(obj.top, obj.top-obj.getBoundingRect().top);
            obj.left = Math.max(obj.left, obj.left-obj.getBoundingRect().left);
        }
        // bot-right corner
        if(obj.getBoundingRect().top+obj.getBoundingRect().height  > obj.canvas.height || obj.getBoundingRect().left+obj.getBoundingRect().width  > obj.canvas.width){
            obj.top = Math.min(obj.top, obj.canvas.height-obj.getBoundingRect().height+obj.top-obj.getBoundingRect().top);
            obj.left = Math.min(obj.left, obj.canvas.width-obj.getBoundingRect().width+obj.left-obj.getBoundingRect().left);
        }
}
